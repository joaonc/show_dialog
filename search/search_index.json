{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Show Dialog","text":"<p>Easily show a dialog window for miscellaneous purposes.</p> <p>The initial use case is to show instructions in manual steps in tests.</p> <p>See features and example for quick details.</p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#library","title":"Library","text":"<pre><code>pip install qt-show-dialog\n</code></pre> <pre><code>from show_dialog import show_dialog, Inputs\n\ndef test_manual():\n    show_dialog(Inputs(\n        title='The Title',\n        description='The Description',\n        timeout=10\n    ))\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<p>After installing the <code>qt-show-dialog</code>, the <code>show_dialog</code> command becomes available in the terminal (Command Line Interface). <pre><code>show_dialog --help\n</code></pre> Quick example: <pre><code>show_dialog --inputs '{\"title\": \"The Title\", \"description\": \"The Description\", \"timeout\": 10}'\n</code></pre> The options using the CLI are the same as when using the library.</p>"},{"location":"#executable-app","title":"Executable app","text":"<p>Go to the release page and download the file for your OS.</p> <p>You can use the executable when working with languages other than Python or when you don't want to add more dependencies to your project (see requirements.in for a list of dependencies).</p> <p>See the CLI section above for more info. The interface is the same.</p>"},{"location":"#pipx","title":"Pipx","text":"<p>Pipx installs Python applications globally in an isolated environment, meaning the Python app will run as any other app installed in the OS.</p> <p>To install with pipx (note that pipx needs to be installed first): <pre><code>pipx install qt-show-dialog\n</code></pre> To later upgrade to a newer version: <pre><code>pipx upgrade qt-show-dialog\n</code></pre></p> <p>The command <code>show_dialog</code> will be available in the terminal. See the CLI section above for more info.</p>"},{"location":"#use-case","title":"Use case","text":""},{"location":"#testing","title":"Testing","text":"<p>The main use case for which this project was created is to add in manual steps in tests.</p> <pre><code>from show_dialog import Inputs, show_dialog\nfrom show_dialog.utils_qt import read_file\n\ndef test_something():\n    \"\"\"\n    This test case is semi-automated, ie, has some steps that\n    are automated and then some manual ones.\n    This happens mostly in integration or end-to-end tests.\n    \"\"\"\n    # Some automated steps\n    start_system()\n    configure_system()\n\n    # Manual step\n    inputs_1 = Inputs.from_file('tests/inputs/input_10.yml')\n    css = read_file('my_custom_style.css')\n    show_dialog(inputs_1, css)\n\n    # More automated steps\n    verify_db_updated()\n\n    # Another manual step\n    inputs_2 = inputs_1.create(\n      title='Submit readout',\n      description='Submit the readout by uploading the file.'\n    )\n    show_dialog(inputs_2, css)\n\n    # More automated steps\n    verify_readout()\n</code></pre>"},{"location":"#script","title":"Script","text":"<p>The dialog can also be shown in a script (bash, bat, powershell) or any other (non-Python) language that can run an executable.</p> <pre><code>#!/bin/bash\n\n# Do some stuff\n\n# Show the dialog\n./show_dialog --inputs \\\n    '{\"title\": \"The Title\", \"description\": \"The Description\", \"timeout\": 10}'\n\n# Handle the exit status\nstatus=$?\nif [ $status -ne 0 ]; then\n    echo \"show_dialog exited with status $status\"\n    exit $status\nfi\n\n# Do more stuff\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Big UI (by default) for easy readability.</li> <li>UI highly configurable via CSS and options.</li> <li>Timeout (optional).</li> <li>Can be used as a library or an external executable.</li> <li>Inputs can be in <code>yaml</code> or <code>json</code>, from file or string.</li> <li>Logging.</li> </ul>"},{"location":"#example","title":"Example","text":"<p>The example below has this <code>yaml</code> input: <pre><code>dialog_title: Manual step\ntitle: Disconnect cable\ndescription: |\n    In this step we need to disconnect the power cable  \n    and verify that the reserve battery gets discharged  \n    within 5 seconds.\n\n    ## Steps\n    1. Disconnect power cable.  \n       It's in the back.\n    2. Wait 5 seconds.\n    3. Check that reserve battery is empty.  \n       See below for more info.\n\n    ## Verifying battery is discharged\n    There's a red light that goes off.\n\n    **Do not touch** the button next to that light.\n\n    More info on that light [here](#some-path).\ndescription_md: true\ntimeout: 20\n</code></pre></p> <p>Note</p> <ul> <li>Description is in markdown format.</li> <li>Some lines have a line break with 2 spaces at the end.   This applies to most MD formats.</li> <li>Many options not represented in this example.</li> </ul> <p></p>"},{"location":"development/","title":"Development","text":"<p>Uses Qt 6 and Qt for Python, aka PySide, which includes Qt Designer, a WYSIWYG UI editor.</p> <p>Docstrings are in reStructuredText format.</p>"},{"location":"development/#contributing","title":"Contributing","text":""},{"location":"development/#requirements","title":"Requirements","text":"<pre><code>pip install -r requirements-dev.txt\n</code></pre> <p>PySide6 (docs) has a few requirements. Details here.</p>"},{"location":"development/#github-cli","title":"GitHub CLI","text":"<p>This project uses GitHub CLI (docs) to manage releases.</p> <p>You'll need to install and authenticate <code>gh</code> in order to perform the release tasks. To install, download the file in the link above and follow the instructions.</p> <p>Authenticate with this command: <pre><code>gh auth login\n</code></pre></p> Sample output <p>Sample output from login with the <code>HTTPS</code> protocol and via web browser. <pre><code>gh auth login\n? What account do you want to log into? GitHub.com\n? What is your preferred protocol for Git operations on this host? HTTPS\n? Authenticate Git with your GitHub credentials? Yes\n? How would you like to authenticate GitHub CLI? Login with a web browser\n\n! First copy your one-time code: 9999-9999\nPress Enter to open github.com in your browser... \n\u2713 Authentication complete.\n- gh config set -h github.com git_protocol https\n\u2713 Configured git protocol\n\u2713 Logged in as &lt;GH username&gt;\n</code></pre></p> <p>You can authenticate in other ways, see docs for more info.</p>"},{"location":"development/#linting-and-tests","title":"Linting and Tests","text":"<p>Linting and unit tests are done as actions in GitHub, but should be executed locally with the following commands: <pre><code>inv lint.all\n</code></pre> <pre><code>inv test.unit\n</code></pre> If using an IDE such as PyCharm or VS Code, the tests can be executed from within the IDE.</p> <p>Note that pytest options are in <code>pyproject.toml</code>, in the <code>[tool.pytest.ini_options]</code> section and linting options are also in <code>pyproject.toml</code> and <code>setup.cfg</code>.</p>"},{"location":"development/#running","title":"Running","text":"<p>Running the code from the CLI or from the IDE needs be done as a module. If trying to run as a script, the relative imports won't work.</p>"},{"location":"development/#cli","title":"CLI","text":"<p>With an inputs file and log level specified. <pre><code>python -m src.show_dialog.main --inputs-file assets/inputs/inputs_07.yaml --log-level debug\n</code></pre></p>"},{"location":"development/#ide","title":"IDE","text":"<p>This section has screenshots from PyCharm. VS Code and other IDEs should have similar options.</p> <p>When running from the IDE, make sure you specify to run <code>main</code> as a module, not a script.</p> <p></p> <p>Here are the full options, including parameters. The working directory should be the project root, not the directory where <code>main.py</code> is located.</p> <p></p>"},{"location":"development/#build-and-publish","title":"Build and Publish","text":"<p>There are two deliverables in this project: the library and the executable app.</p> <p>This section goes over how to build the app, create a release in GitHub and publish to Pypi.</p>"},{"location":"development/#manually","title":"Manually","text":"<ol> <li> <p>Bump version    <pre><code>inv build.version --mode pr\n</code></pre>    This will:</p> <ol> <li>Update the necessary files to the new version.</li> <li>Create and merge a new PR called \"Release 1.2.3\".     Use different values <code>--mode</code> for different behaviors, ex don't create a PR.</li> </ol> </li> <li> <p>Create release in GitHub    <pre><code>inv build.release\n</code></pre>    Releases are published in GitHub, under the    Releases page.    A tag is also created.</p> <p>Use the <code>--notes</code> or <code>--notes-file</code> to add more details to the release.  </p> <p>Recommended command</p> <p>Create the file <code>release_notes.md</code> and don't add it to the project (it's in <code>.gitignore</code>, so you should be ok).</p> <pre><code>inv build.release --notes-file release_notes.md\n</code></pre> </li> <li> <p>Publish to Pypi    <pre><code>inv build.publish\n</code></pre></p> <p>Note</p> <p>There's a similarly named project in Pypi called <code>showdialog</code>, so the initially chosen names of <code>show-dialog</code> and <code>show_dialog</code> were not possible due to the similar name and Pypi didn't allow it, so ended up with the current <code>qt-show-dialog</code>.</p> </li> <li> <p>Upload app to GitHub release</p> <p>This step is optional, but recommended. Each build (one per OS) is close to 50MB.  <pre><code>inv build.app\ninv build.upload\n</code></pre>  You can also use the Build app GitHub action to create the app in any OS. See the  CI/CD section below.</p> </li> </ol>"},{"location":"development/#cicd","title":"CI/CD","text":"<p>There are two different GitHub actions to handle the build/release/publish process.</p>"},{"location":"development/#release","title":"Release","text":"<p>This action does steps 1-3 described in the Manually section.</p> <ol> <li>Update version in required files.</li> <li>Create and merge a PR with the updated files.</li> <li>Create a GitHub release and tag.</li> </ol> <p>To run the Release action:</p> <ol> <li>In the Actions tab, select the Release workflow.</li> <li>Click Run workflow.</li> <li>Leave the <code>main</code> branch selected.</li> <li>Select the version to bump.</li> <li>Select whether to create a release in GitHub.</li> <li>If creating a release in GitHub, add release notes.    When doing this step manually, a release notes file can be specified and include more    information and in MD format.</li> <li>Select whether to publish to Pypi.</li> <li>Click Run workflow.</li> </ol> <p>The version for both the GitHub release and Pypi package is defined in <code>pyproject.toml::project::version</code> and <code>src/show_dialog/__init__.py::__version__</code>. They need to match or the action will fail.</p> <p></p>"},{"location":"development/#build-app","title":"Build App","text":"<p>This action does step 4 described in the Manually section, but any OS can be selected (whereas manually is only in the OS in which the tasks are executed).</p> <p>To run the Build app action:</p> <ol> <li>In the Actions tab, select the Build app workflow.</li> <li>Click Run workflow.</li> <li>Select the tag (version) to build the app(s) for.    By default is <code>main</code>, which works, but is not what we want as an app may be created with     functionality not in the release if <code>main</code> has new commits.</li> <li>Select which OS's to build the apps for.    The apps will be added to the assets in the release corresponding to the tag in the previous    step.</li> <li>Click Run workflow.</li> </ol> <p></p>"},{"location":"development/#more-info","title":"More info","text":"<p>Managing releases in a repository.</p>"},{"location":"inputs/","title":"Inputs","text":"<p>Inputs are defined in the <code>Inputs</code> class.</p> <p>This class is serialized to/from file as JSON or YAML with the exact same fields.</p>"},{"location":"inputs/#formatting","title":"Formatting","text":""},{"location":"inputs/#buttons","title":"Buttons","text":"<p>Which buttons and text to be used.</p> <p>Options:</p> <ul> <li><code>Ok</code>   No icon is displayed unless <code>pass_button_icon</code> is set.</li> <li><code>Pass/Fail</code> (default)</li> <li><code>Ok/Cancel</code></li> <li><code>Yes/No</code></li> </ul> <p>With all options, the buttons can be further customized with these settings:</p> <ul> <li><code>pass_button_text</code></li> <li><code>pass_button_icon</code></li> <li><code>fail_button_text</code></li> <li><code>fail_button_icon</code></li> </ul>"},{"location":"inputs/#theme","title":"Theme","text":"<p>Themes are styles and portions of it can be overwritten with other styling options.</p> <p>Options:</p> <ul> <li><code>Light</code></li> <li><code>Dark</code></li> <li><code>System</code>   No theme is applied and uses the system theme.</li> </ul>"},{"location":"ipc/","title":"Inter-Process Communication","text":""},{"location":"ipc/#purpose","title":"Purpose","text":"<p>TODO</p>"},{"location":"ipc/#how-to-use-it","title":"How to use it","text":""},{"location":"ipc/#server","title":"Server","text":"<p>TODO</p>"},{"location":"ipc/#client","title":"Client","text":"<p>TODO</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#library","title":"Library","text":"<p>TODO</p>"},{"location":"usage/#logging","title":"Logging","text":"<p>TODO</p>"},{"location":"usage/#shortcuts","title":"Shortcuts","text":"<p>The following shortcuts are available:</p> Shortcut <code>Ctrl</code>+<code>Q</code> Exit as failure <code>Ctrl</code>+<code>P</code> Exit as pass <code>+</code> Increase timeout <p>Note</p> <p>The <code>Esc</code> key is disabled in order to prevent accidentally dismissing the dialog.</p>"},{"location":"usage/#executable","title":"Executable","text":"<p>This section applies to both the executable app and the CLI script after pip installing the package.</p> <p>TODO</p>"},{"location":"usage/#exit-codes","title":"Exit codes","text":"<p><code>0</code> represents success, otherwise failure.</p> Exit code <code>0</code> One of:<li><code>Pass</code> button was clicked.<li>Timeout occurred and <code>timeout_pass</code> is <code>True</code> in inputs.<li><code>Ctrl+P</code> shortcut was used. <code>1</code> Unknown error, likely from an uncaught exception. <code>2</code> <code>Fail</code> button was clicked. <code>3</code> One of:<li>Dialog was closed with the <code>X</code> button.<li><code>Ctrl+Q</code> shortcut was used. <code>4</code> Timeout occurred and <code>timeout_pass</code> is <code>False</code> in inputs. <p>These exit codes are represented in the <code>ExitCode</code> class.</p>"}]}